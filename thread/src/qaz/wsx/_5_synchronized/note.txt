1.问题
Q:要解决上述多线程并发访问多一个资源的安全性问题:
A:保证打印苹果编号和苹果总数减1操作,必须同步完成.
  A线程进入操作的时候,B和C线程只能在外等着,A操作结束,A和B和C才有机会进入代码去执行.

2.Java实现
同步锁:
    为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制.
    同步监听对象/同步锁/同步监听器/互斥锁:
    对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.
    Java程序运行使用任何对象作为同步监听对象,但是一般的,我们把当前并发访问的共同资源作为同步监听对象.
    注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着.
    同步锁是谁:
          对于非static方法,同步锁就是this.
          对于static方法,我们使用当前方法所在类的字节码对象(AppleMethod.class).

方式1:同步代码块
synchronized(同步锁)
{
     需要同步操作的代码
}


方式2:同步方法
同步方法:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着.
synchronized public void doWork(){
     //do something...
}

方式3:锁机制(Lock)
Lock机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象.
最佳实践:
class X {
    private final ReentrantLock lock = new ReentrantLock();
    // ...
    public void m() {
        lock.lock(); //block until condition holds
        try {
            //... method body
        } finally {
            lock.unlock();
        }
    }
}

3.总结
synchronized的好与坏:
好处:保证了多线程并发访问时的同步操作,避免线程的安全性问题.
缺点:使用synchronized的方法/代码块的性能比不用要低一些.
建议:尽量减小synchronized的作用域.
注意:不要使用synchronized修饰run方法,修饰之后,某一个线程就执行完了所有的功能. 好比是多个线程出现串行.

4.拓展
a.String,StringBuffer,StringBuilder
速度由快到慢:StringBuilder > StringBuffer > String
String:String对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程,所以执行速度很慢
StringBuffer:有很多加锁的方法,比如append().线程上是安全的
StringBuilder:线程上是不安全的

b.ArrayList,Vector 和 HashMap,HashTable


c.双重检查加锁:
可以使用“双重检查加锁”的方式来实现，就可以既实现线程安全，又能够使性能不受很大的影响。那么什么是“双重检查加锁”机制呢？
所谓“双重检查加锁”机制，指的是：并不是每次进入getInstance方法都需要同步，而是先不同步，进入方法后，先检查实例是否存在，如果不存在才进行下面的同步块，这是第一重检查，进入同步块过后，再次检查实例是否存在，如果不存在，就在同步的情况下创建一个实例，这是第二重检查。这样一来，就只需要同步一次了，从而减少了多次在同步情况下进行判断所浪费的时间。
“双重检查加锁”机制的实现会使用关键字volatile，它的意思是：被volatile修饰的变量的值，将不会被本地线程缓存，所有对该变量的读写都是直接操作共享内存，从而确保多个线程能正确的处理该变量。
注意：在java1.4及以前版本中，很多JVM对于volatile关键字的实现的问题，会导致“双重检查加锁”的失败，因此“双重检查加锁”机制只只能用在java5及以上的版本。
提示：由于volatile关键字可能会屏蔽掉虚拟机中一些必要的代码优化，所以运行效率并不是很高。因此一般建议，没有特别的需要，不要使用。也就是说，虽然可以使用“双重检查加锁”机制来实现线程安全的单例，但并不建议大量采用，可以根据情况来选用。

d.单例模式
饿汉式
懒汉式:线程安全问题



