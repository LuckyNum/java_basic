1.基本概念
    传统的同步阻塞模型开发中，
    ServerSocket负责绑定IP地址，启动监听端口；
    Socket负责发起连接操作。
    连接成功后，双方通过输入和输出流进行同步阻塞式通信。

2.BIO的服务端通信模型：
    采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，
    它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理没处理完成后，
    通过输出流返回应答给客户端，线程销毁。即典型的一请求一应答通宵模型。

3.该模型最大的问题:
    就是缺乏弹性伸缩能力，当客户端并发访问量增加后，服务端的线程个数和客户端并发访问数呈1:1的正比关系，Java
    中的线程也是比较宝贵的系统资源，线程数量快速膨胀后，系统的性能将急剧下降，随着访问量的继续增大，系统最终就死掉了。

4.伪异步I/O编程:
        为了改进这种一连接一线程的模型，我们可以使用线程池来管理这些线程
        ，实现1个或多个线程处理N个客户端的模型（但是底层还是使用的同步阻塞I/O），通常被称为“伪异步I/O模型“。

5.参考:
    https://blog.csdn.net/congge_1993/article/details/73497439
    https://blog.csdn.net/anxpp/article/details/51512200

    *BIO受线程数的影响极大